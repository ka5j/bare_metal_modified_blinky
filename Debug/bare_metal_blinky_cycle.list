
bare_metal_blinky_cycle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005a4  080005a4  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a4  080005a4  000015a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005a8  080005a8  000015a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005ac  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080005b0  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005b0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007ec  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000271  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00002a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b4  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013b0  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000014f0  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0cf2  00000000  00000000  000054f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c61e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002a0  00000000  00000000  000c622c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000c64cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800058c 	.word	0x0800058c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800058c 	.word	0x0800058c

08000204 <main>:
void EXTI13_Init(void);
void GPIOA_Init(void);
void GPIOC_Init(void);


int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	RCC_Init();
 8000208:	f000 f80e 	bl	8000228 <RCC_Init>

	GPIOA_Init();
 800020c:	f000 f8ee 	bl	80003ec <GPIOA_Init>
	GPIOC_Init();
 8000210:	f000 f91a 	bl	8000448 <GPIOC_Init>

	SysTick_Init(HIGH_SPEED);
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <main+0x20>)
 8000216:	f000 f83b 	bl	8000290 <SysTick_Init>

	EXTI13_Init();
 800021a:	f000 f869 	bl	80002f0 <EXTI13_Init>

	while(1);
 800021e:	bf00      	nop
 8000220:	e7fd      	b.n	800021e <main+0x1a>
 8000222:	bf00      	nop
 8000224:	003d0900 	.word	0x003d0900

08000228 <RCC_Init>:
}

void RCC_Init(void){
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1 << 0); //Enable GPIO port A clock
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <RCC_Init+0x34>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <RCC_Init+0x34>)
 8000232:	f043 0301 	orr.w	r3, r3, #1
 8000236:	6013      	str	r3, [r2, #0]
	RCC_AHB1ENR |= (1 << 2); //Enable GPIO port C clock
 8000238:	4b08      	ldr	r3, [pc, #32]	@ (800025c <RCC_Init+0x34>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a07      	ldr	r2, [pc, #28]	@ (800025c <RCC_Init+0x34>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]
	RCC_APB2ENR |= (1 << 14); //Enable SYSCFG clock
 8000244:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <RCC_Init+0x38>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a05      	ldr	r2, [pc, #20]	@ (8000260 <RCC_Init+0x38>)
 800024a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800024e:	6013      	str	r3, [r2, #0]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023830 	.word	0x40023830
 8000260:	40023844 	.word	0x40023844

08000264 <SysTick_Set_Counter>:

void SysTick_Set_Counter(uint32_t ticks){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
	SYSTICK_RELOAD = ticks - 1;
 800026c:	4a06      	ldr	r2, [pc, #24]	@ (8000288 <SysTick_Set_Counter+0x24>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3b01      	subs	r3, #1
 8000272:	6013      	str	r3, [r2, #0]
	SYSTICK_CURRENT = 0;
 8000274:	4b05      	ldr	r3, [pc, #20]	@ (800028c <SysTick_Set_Counter+0x28>)
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000e014 	.word	0xe000e014
 800028c:	e000e018 	.word	0xe000e018

08000290 <SysTick_Init>:

void SysTick_Init(uint32_t ticks){
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	SysTick_Set_Counter(ticks);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f7ff ffe3 	bl	8000264 <SysTick_Set_Counter>
	SYSTICK_CTRL |= (1 << 2);
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <SysTick_Init+0x3c>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <SysTick_Init+0x3c>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6013      	str	r3, [r2, #0]
	SYSTICK_CTRL |= (1 << 1);
 80002aa:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <SysTick_Init+0x3c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a07      	ldr	r2, [pc, #28]	@ (80002cc <SysTick_Init+0x3c>)
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6013      	str	r3, [r2, #0]
	SYSTICK_CTRL |= (1 << 0);
 80002b6:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <SysTick_Init+0x3c>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a04      	ldr	r2, [pc, #16]	@ (80002cc <SysTick_Init+0x3c>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	e000e010 	.word	0xe000e010

080002d0 <SysTick_Handler>:

void SysTick_Handler(void){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	GPIOA_ODR ^= (1 << 5);
 80002d4:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <SysTick_Handler+0x1c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <SysTick_Handler+0x1c>)
 80002da:	f083 0320 	eor.w	r3, r3, #32
 80002de:	6013      	str	r3, [r2, #0]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40020014 	.word	0x40020014

080002f0 <EXTI13_Init>:

void EXTI13_Init(void){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	NVIC_ISER1 |= (1 << (40 - 32)); //enable EXTI15_10 interrupt (IRQ #40)
 80002f4:	4b17      	ldr	r3, [pc, #92]	@ (8000354 <EXTI13_Init+0x64>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a16      	ldr	r2, [pc, #88]	@ (8000354 <EXTI13_Init+0x64>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002fe:	6013      	str	r3, [r2, #0]

	SYSCFG_EXTICR4 &= ~(0xF << 4); //clear EXTI13 bits 4-7
 8000300:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <EXTI13_Init+0x68>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a14      	ldr	r2, [pc, #80]	@ (8000358 <EXTI13_Init+0x68>)
 8000306:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800030a:	6013      	str	r3, [r2, #0]
	SYSCFG_EXTICR4 |= (0x2 << 4); //set EXTI13 to port C
 800030c:	4b12      	ldr	r3, [pc, #72]	@ (8000358 <EXTI13_Init+0x68>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a11      	ldr	r2, [pc, #68]	@ (8000358 <EXTI13_Init+0x68>)
 8000312:	f043 0320 	orr.w	r3, r3, #32
 8000316:	6013      	str	r3, [r2, #0]

	EXTI_EMR &= ~(1 << 13);
 8000318:	4b10      	ldr	r3, [pc, #64]	@ (800035c <EXTI13_Init+0x6c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0f      	ldr	r2, [pc, #60]	@ (800035c <EXTI13_Init+0x6c>)
 800031e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000322:	6013      	str	r3, [r2, #0]
	EXTI_RTSR &= ~(1 << 13);
 8000324:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <EXTI13_Init+0x70>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <EXTI13_Init+0x70>)
 800032a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800032e:	6013      	str	r3, [r2, #0]
	EXTI_FTSR |= (1 << 13); //enable falling edge interrupt
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <EXTI13_Init+0x74>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <EXTI13_Init+0x74>)
 8000336:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800033a:	6013      	str	r3, [r2, #0]
	EXTI_IMR |= (1 << 13); //allow EXTI13 interrupt
 800033c:	4b0a      	ldr	r3, [pc, #40]	@ (8000368 <EXTI13_Init+0x78>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a09      	ldr	r2, [pc, #36]	@ (8000368 <EXTI13_Init+0x78>)
 8000342:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000346:	6013      	str	r3, [r2, #0]

}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	e000e104 	.word	0xe000e104
 8000358:	40013814 	.word	0x40013814
 800035c:	40013c04 	.word	0x40013c04
 8000360:	40013c08 	.word	0x40013c08
 8000364:	40013c0c 	.word	0x40013c0c
 8000368:	40013c00 	.word	0x40013c00

0800036c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	EXTI_PR |= (1 << 13);
 8000370:	4b18      	ldr	r3, [pc, #96]	@ (80003d4 <EXTI15_10_IRQHandler+0x68>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a17      	ldr	r2, [pc, #92]	@ (80003d4 <EXTI15_10_IRQHandler+0x68>)
 8000376:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800037a:	6013      	str	r3, [r2, #0]
	speed = (speed % MAX_SPEED) + 1;
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <EXTI15_10_IRQHandler+0x6c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4b16      	ldr	r3, [pc, #88]	@ (80003dc <EXTI15_10_IRQHandler+0x70>)
 8000384:	fba3 1302 	umull	r1, r3, r3, r2
 8000388:	0859      	lsrs	r1, r3, #1
 800038a:	460b      	mov	r3, r1
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	440b      	add	r3, r1
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	b2db      	uxtb	r3, r3
 8000394:	3301      	adds	r3, #1
 8000396:	b2da      	uxtb	r2, r3
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <EXTI15_10_IRQHandler+0x6c>)
 800039a:	701a      	strb	r2, [r3, #0]

	switch(speed){
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <EXTI15_10_IRQHandler+0x6c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	d00e      	beq.n	80003c4 <EXTI15_10_IRQHandler+0x58>
 80003a6:	2b03      	cmp	r3, #3
 80003a8:	dc10      	bgt.n	80003cc <EXTI15_10_IRQHandler+0x60>
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d002      	beq.n	80003b4 <EXTI15_10_IRQHandler+0x48>
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	d004      	beq.n	80003bc <EXTI15_10_IRQHandler+0x50>
			break;
		case 3:
			SysTick_Set_Counter(LOW_SPEED);
			break;
		default:
			break;
 80003b2:	e00b      	b.n	80003cc <EXTI15_10_IRQHandler+0x60>
			SysTick_Set_Counter(HIGH_SPEED);
 80003b4:	480a      	ldr	r0, [pc, #40]	@ (80003e0 <EXTI15_10_IRQHandler+0x74>)
 80003b6:	f7ff ff55 	bl	8000264 <SysTick_Set_Counter>
			break;
 80003ba:	e008      	b.n	80003ce <EXTI15_10_IRQHandler+0x62>
			SysTick_Set_Counter(MEDIUM_SPEED);
 80003bc:	4809      	ldr	r0, [pc, #36]	@ (80003e4 <EXTI15_10_IRQHandler+0x78>)
 80003be:	f7ff ff51 	bl	8000264 <SysTick_Set_Counter>
			break;
 80003c2:	e004      	b.n	80003ce <EXTI15_10_IRQHandler+0x62>
			SysTick_Set_Counter(LOW_SPEED);
 80003c4:	4808      	ldr	r0, [pc, #32]	@ (80003e8 <EXTI15_10_IRQHandler+0x7c>)
 80003c6:	f7ff ff4d 	bl	8000264 <SysTick_Set_Counter>
			break;
 80003ca:	e000      	b.n	80003ce <EXTI15_10_IRQHandler+0x62>
			break;
 80003cc:	bf00      	nop
	}

}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40013c14 	.word	0x40013c14
 80003d8:	20000000 	.word	0x20000000
 80003dc:	aaaaaaab 	.word	0xaaaaaaab
 80003e0:	003d0900 	.word	0x003d0900
 80003e4:	007a1200 	.word	0x007a1200
 80003e8:	00f42400 	.word	0x00f42400

080003ec <GPIOA_Init>:

//Set GPIOA registers to output mode for pin PA5
void GPIOA_Init(void){
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
	GPIOA_MODER &= ~(3 << (5 * 2));
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <GPIOA_Init+0x4c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a10      	ldr	r2, [pc, #64]	@ (8000438 <GPIOA_Init+0x4c>)
 80003f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOA_MODER |= (1 << (5 * 2));
 80003fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <GPIOA_Init+0x4c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0d      	ldr	r2, [pc, #52]	@ (8000438 <GPIOA_Init+0x4c>)
 8000402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000406:	6013      	str	r3, [r2, #0]
	GPIOA_OTYPER &= ~(1 << 5);
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <GPIOA_Init+0x50>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a0b      	ldr	r2, [pc, #44]	@ (800043c <GPIOA_Init+0x50>)
 800040e:	f023 0320 	bic.w	r3, r3, #32
 8000412:	6013      	str	r3, [r2, #0]
	GPIOA_OSPEEDER &= ~(3 << (5 * 2));
 8000414:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <GPIOA_Init+0x54>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a09      	ldr	r2, [pc, #36]	@ (8000440 <GPIOA_Init+0x54>)
 800041a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800041e:	6013      	str	r3, [r2, #0]
	GPIOA_PUPDR &= ~(3 << (5 * 2));
 8000420:	4b08      	ldr	r3, [pc, #32]	@ (8000444 <GPIOA_Init+0x58>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a07      	ldr	r2, [pc, #28]	@ (8000444 <GPIOA_Init+0x58>)
 8000426:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40020000 	.word	0x40020000
 800043c:	40020004 	.word	0x40020004
 8000440:	40020008 	.word	0x40020008
 8000444:	4002000c 	.word	0x4002000c

08000448 <GPIOC_Init>:

//set GPIOA registers to input mode for pin PC13
void GPIOC_Init(void){
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
	GPIOC_MODER &= ~(3 << (13 * 2));
 800044c:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <GPIOC_Init+0x28>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a07      	ldr	r2, [pc, #28]	@ (8000470 <GPIOC_Init+0x28>)
 8000452:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000456:	6013      	str	r3, [r2, #0]
	GPIOC_PUPDR |= (1 << 13 * 2);
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <GPIOC_Init+0x2c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <GPIOC_Init+0x2c>)
 800045e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000462:	6013      	str	r3, [r2, #0]
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40020800 	.word	0x40020800
 8000474:	4002080c 	.word	0x4002080c

08000478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <NMI_Handler+0x4>

08000480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <MemManage_Handler+0x4>

08000490 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <BusFault_Handler+0x4>

08000498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <UsageFault_Handler+0x4>

080004a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <SystemInit+0x20>)
 80004d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004d6:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <SystemInit+0x20>)
 80004d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000528 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004f4:	f7ff ffea 	bl	80004cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f8:	480c      	ldr	r0, [pc, #48]	@ (800052c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004fa:	490d      	ldr	r1, [pc, #52]	@ (8000530 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000534 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000510:	4c0a      	ldr	r4, [pc, #40]	@ (800053c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800051e:	f000 f811 	bl	8000544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000522:	f7ff fe6f 	bl	8000204 <main>
  bx  lr    
 8000526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800052c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000530:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000534:	080005ac 	.word	0x080005ac
  ldr r2, =_sbss
 8000538:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800053c:	20000020 	.word	0x20000020

08000540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000540:	e7fe      	b.n	8000540 <ADC_IRQHandler>
	...

08000544 <__libc_init_array>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	4d0d      	ldr	r5, [pc, #52]	@ (800057c <__libc_init_array+0x38>)
 8000548:	4c0d      	ldr	r4, [pc, #52]	@ (8000580 <__libc_init_array+0x3c>)
 800054a:	1b64      	subs	r4, r4, r5
 800054c:	10a4      	asrs	r4, r4, #2
 800054e:	2600      	movs	r6, #0
 8000550:	42a6      	cmp	r6, r4
 8000552:	d109      	bne.n	8000568 <__libc_init_array+0x24>
 8000554:	4d0b      	ldr	r5, [pc, #44]	@ (8000584 <__libc_init_array+0x40>)
 8000556:	4c0c      	ldr	r4, [pc, #48]	@ (8000588 <__libc_init_array+0x44>)
 8000558:	f000 f818 	bl	800058c <_init>
 800055c:	1b64      	subs	r4, r4, r5
 800055e:	10a4      	asrs	r4, r4, #2
 8000560:	2600      	movs	r6, #0
 8000562:	42a6      	cmp	r6, r4
 8000564:	d105      	bne.n	8000572 <__libc_init_array+0x2e>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f855 3b04 	ldr.w	r3, [r5], #4
 800056c:	4798      	blx	r3
 800056e:	3601      	adds	r6, #1
 8000570:	e7ee      	b.n	8000550 <__libc_init_array+0xc>
 8000572:	f855 3b04 	ldr.w	r3, [r5], #4
 8000576:	4798      	blx	r3
 8000578:	3601      	adds	r6, #1
 800057a:	e7f2      	b.n	8000562 <__libc_init_array+0x1e>
 800057c:	080005a4 	.word	0x080005a4
 8000580:	080005a4 	.word	0x080005a4
 8000584:	080005a4 	.word	0x080005a4
 8000588:	080005a8 	.word	0x080005a8

0800058c <_init>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr

08000598 <_fini>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr
